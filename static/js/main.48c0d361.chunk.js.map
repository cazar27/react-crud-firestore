{"version":3,"sources":["firebase.js","components/ObjectForm.js","components/Objects.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","ObjectForm","props","initialStateValues","type","name","description","useState","values","setValues","handleInputChange","e","target","value","getObjectById","id","a","collection","doc","get","data","useEffect","currentId","onSubmit","preventDefault","str","RegExp","test","toast","autoClose","addOrEditObjects","className","placeholder","onChange","rows","Objects","searchValue","search","objects","setObjects","setCurrentId","getObjectsByName","nameSearch","onSnapshot","querySnapshot","docs","forEach","toLowerCase","includes","push","getObjects","onDeleteObject","window","confirm","delete","linkObject","set","update","console","error","valueFind","onClick","map","object","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.48c0d361.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyB3jCgTrlseerL6Uqvg4panyaOrwl64PKM\",\r\n    authDomain: \"react-crud-efa69.firebaseapp.com\",\r\n    projectId: \"react-crud-efa69\",\r\n    storageBucket: \"react-crud-efa69.appspot.com\",\r\n    messagingSenderId: \"225002651465\",\r\n    appId: \"1:225002651465:web:876650e33cd073a6e3e498\",\r\n    measurementId: \"G-H9WTCH2EGZ\"\r\n};\r\n// Initialize Firebase\r\nconst fb = firebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = fb.firestore();","import React, { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst ObjectForm = (props) => {\r\n  const initialStateValues = {\r\n    type: \"\",\r\n    name: \"\",\r\n    description: \"\"\r\n  };\r\n\r\n  const [values, setValues] = useState(initialStateValues);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const validtype = (str) => {\r\n    var pattern = new RegExp();\r\n    return !!pattern.test(str);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validtype(values.type)) {\r\n      return toast(\"invalid type\", { type: \"warning\", autoClose: 1000 });\r\n    }\r\n\r\n    props.addOrEditObjects(values);\r\n    setValues({ ...initialStateValues });\r\n  };\r\n\r\n  const getObjectById = async (id) => {\r\n    const doc = await db.collection(\"objects\").doc(id).get();\r\n    setValues({ ...doc.data() });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.currentId === \"\") {\r\n      setValues({ ...initialStateValues });\r\n    } else {\r\n      getObjectById(props.currentId);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [props.currentId]);\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"card card-body border-primary\">\r\n      <div className=\"form-group\">\r\n        <label className=\"form-label\">Type</label>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Object Type\"\r\n          value={values.type}\r\n          name=\"type\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label className=\"form-label\">Name</label>\r\n        <input\r\n          type=\"text\"\r\n          value={values.name}\r\n          name=\"name\"\r\n          placeholder=\"Object Name\"\r\n          className=\"form-control\"\r\n          onChange={handleInputChange}\r\n        />\r\n      </div>\r\n      <div className=\"form-group\">\r\n        <label className=\"form-label\">Description</label>\r\n        <textarea\r\n          rows=\"3\"\r\n          className=\"form-control\"\r\n          placeholder=\"Write a Description\"\r\n          name=\"description\"\r\n          value={values.description}\r\n          onChange={handleInputChange}\r\n        ></textarea>\r\n      </div>\r\n\r\n      <button className=\"btn btn-primary btn-block\">\r\n        {props.currentId === \"\" ? \"Insert\" : \"Update\"}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ObjectForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ObjectForm from \"./ObjectForm\";\r\n\r\nimport { db } from \"../firebase\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst Objects = () => {\r\n  const initialStateValues = {\r\n    searchValue: \"\"\r\n  };\r\n  const [search, setValues] = useState(initialStateValues);\r\n  const [objects, setObjects] = useState([]);\r\n  const [currentId, setCurrentId] = useState(\"\");\r\n\r\n  const searchSubmit = (e) => {\r\n    e.preventDefault();\r\n    const valueFind = search.searchValue; \r\n    getObjectsByName(valueFind);\r\n  }\r\n\r\n  const getObjectsByName = async (nameSearch) => {\r\n    db.collection(\"objects\").onSnapshot((querySnapshot) => {\r\n      const docs = [];\r\n      querySnapshot.forEach((doc) => {\r\n        if(doc.data().name.toLowerCase().includes(nameSearch.toLowerCase()))\r\n          docs.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      setObjects(docs);\r\n    });\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setValues({ ...search , [name]: value });\r\n  };\r\n\r\n  const getObjects = async () => {\r\n    db.collection(\"objects\").onSnapshot((querySnapshot) => {\r\n      const docs = [];\r\n      querySnapshot.forEach((doc) => {\r\n        docs.push({ ...doc.data(), id: doc.id });\r\n      });\r\n      setObjects(docs);\r\n    });\r\n  };\r\n\r\n  const onDeleteObject = async (id) => {\r\n    if (window.confirm(\"are you sure you want to delete this link?\")) {\r\n      await db.collection(\"objects\").doc(id).delete();\r\n      toast(\"Object removed successfully\", {\r\n        type: \"error\",\r\n        autoClose: 2000\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getObjects();\r\n  }, []);\r\n\r\n  const addOrEditObjects = async (linkObject) => {\r\n    try {\r\n      if (currentId === \"\") {\r\n        await db.collection(\"objects\").doc().set(linkObject);\r\n        toast(\"New object added\", {\r\n          type: \"success\"\r\n        });\r\n      } else {\r\n        await db.collection(\"objects\").doc(currentId).update(linkObject);\r\n        toast(\"Object updated successfully\", {\r\n          type: \"info\"\r\n        });\r\n        setCurrentId(\"\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n        <div className=\"container\">\r\n          <form onSubmit={searchSubmit} className=\"form-inline my-2 my-lg-0\">\r\n            <input\r\n                className=\"form-control mr-sm-2\"\r\n                type=\"text\"\r\n                name=\"searchValue\"\r\n                placeholder=\"Search\"\r\n                value={search.searchValue}\r\n                onChange={handleInputChange}\r\n            />\r\n            <button className=\"btn btn-success my-2 my-sm-0 mr-2\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n            <button className=\"btn btn-warning my-2 my-sm-0\" onClick={getObjects}>\r\n              Restart List\r\n            </button>\r\n        </div>\r\n      </nav>\r\n      <div className=\"container py-3\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4 p-2\">\r\n            <ObjectForm {...{ addOrEditObjects, currentId, objects }} />\r\n          </div>\r\n          <div className=\"col-md-8 p-2\">\r\n            {objects.map((object) => (\r\n              <div className=\"card mb-1\" key={object.id}>\r\n                <div className=\"card-body\">\r\n                  <div className=\"d-flex justify-content-between\">\r\n                    <h4>\r\n                      <span className=\"normal\">Name: </span>\r\n                      {object.name}\r\n                    </h4>\r\n                    <div className=\"pointer\">\r\n                      <i\r\n                        className=\"material-icons text-danger\"\r\n                        onClick={() => onDeleteObject(object.id)}\r\n                      >\r\n                        close\r\n                      </i>\r\n                      <i\r\n                        className=\"material-icons\"\r\n                        onClick={() => setCurrentId(object.id)}\r\n                      >\r\n                        create\r\n                      </i>\r\n                    </div>\r\n                  </div>\r\n                  <p>Type: {object.type}</p>\r\n                  <p>Description: {object.description}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>  \r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Objects;\r\n","import React from \"react\";\r\nimport Objects from \"./components/Objects\";\r\nimport \"./App.css\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Objects />\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootswatch/dist/lux/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}